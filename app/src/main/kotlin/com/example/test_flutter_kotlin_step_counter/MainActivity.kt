package com.example.test_flutter_kotlin_step_counter

import android.os.Bundle
import android.widget.Toast
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import com.example.test_flutter_kotlin_step_counter.db.AppDatabase
import com.example.test_flutter_kotlin_step_counter.db.StepRecord
import com.example.test_flutter_kotlin_step_counter.service.StepServiceManager
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import java.text.SimpleDateFormat
import java.util.*

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        val dao = AppDatabase.getInstance(applicationContext).stepDao()

        setContent {
            val scope = rememberCoroutineScope()
            var stepList by remember { mutableStateOf(listOf<StepRecord>()) }
            var secondsLeft by remember { mutableStateOf(60) }

            // ÂàùÊúüË™≠„ÅøËæº„Åø
            LaunchedEffect(Unit) {
                withContext(Dispatchers.IO) {
                    stepList = dao.getAll()
                }
            }

            LaunchedEffect(Unit) {
                while (true) {
                    delay(1000)
                    secondsLeft = (secondsLeft - 1).coerceAtLeast(0)
                    if (secondsLeft == 0) {
                        secondsLeft = 60
                        val newList = withContext(Dispatchers.IO) {
                            dao.getAll()
                        }
                        stepList = newList // ‚Üê „Åì„Çå„ÅåÈáçË¶Å
                    }
                }
            }

            Surface(modifier = Modifier.fillMaxSize()) {
                Column(
                    horizontalAlignment = Alignment.CenterHorizontally,
                    verticalArrangement = Arrangement.spacedBy(12.dp),
                    modifier = Modifier.padding(16.dp)
                ) {
                    // ÊâãÂãï‰øùÂ≠ò„Éú„Çø„É≥
                    Button(onClick = {
                        scope.launch(Dispatchers.IO) {
                            val today = getToday()
                            val nowTime = getTime()
                            val epochSec = System.currentTimeMillis() / 1000L
                            val existing = dao.getByDate(today)

                            if (existing == null) {
                                dao.insert(
                                    StepRecord(
                                        date = today,
                                        time = nowTime,
                                        step = epochSec.toInt()
                                    )
                                )
                            } else {
                                dao.update(existing.copy(time = nowTime, step = epochSec.toInt()))
                            }

                            stepList = dao.getAll()
                        }
                    }) {
                        Text("ü¶∂ ‰ªäÊó•„ÅÆ„Çπ„ÉÜ„ÉÉ„Éó„Çí‰øùÂ≠ò/Êõ¥Êñ∞")
                    }

                    // ÂÖ®ÂâäÈô§„Éú„Çø„É≥
                    Button(onClick = {
                        scope.launch(Dispatchers.IO) {
                            dao.deleteAll()
                            stepList = dao.getAll()
                        }
                    }) {
                        Text("üóë „Éá„Éº„Çø„ÇíÂÖ®ÂâäÈô§")
                    }

                    // ForegroundService ÈñãÂßã
                    Button(onClick = {
                        StepServiceManager.start(this@MainActivity)
                        Toast.makeText(this@MainActivity, "‚ñ∂Ô∏è „Çµ„Éº„Éì„ÇπÈñãÂßã", Toast.LENGTH_SHORT)
                            .show()
                    }) {
                        Text("‚ñ∂Ô∏è „Çπ„ÉÜ„ÉÉ„ÉóË®òÈå≤„Çµ„Éº„Éì„ÇπÈñãÂßã")
                    }

                    // ForegroundService ÂÅúÊ≠¢
                    Button(onClick = {
                        StepServiceManager.stop(this@MainActivity)
                        Toast.makeText(this@MainActivity, "‚èπ „Çµ„Éº„Éì„ÇπÂÅúÊ≠¢", Toast.LENGTH_SHORT)
                            .show()
                    }) {
                        Text("‚èπ „Çπ„ÉÜ„ÉÉ„ÉóË®òÈå≤„Çµ„Éº„Éì„ÇπÂÅúÊ≠¢")
                    }

                    // „Çµ„Éº„Éì„ÇπÁä∂ÊÖãÁ¢∫Ë™ç
                    Button(onClick = {
                        val isRunning = StepServiceManager.isRunning(this@MainActivity)
                        Toast.makeText(
                            this@MainActivity,
                            if (isRunning) "‚úÖ „Çµ„Éº„Éì„ÇπÁ®ºÂÉç‰∏≠" else "‚ùå „Çµ„Éº„Éì„ÇπÂÅúÊ≠¢‰∏≠",
                            Toast.LENGTH_SHORT
                        ).show()
                    }) {
                        Text("‚ùì „Çµ„Éº„Éì„ÇπÁä∂ÊÖãÁ¢∫Ë™ç")
                    }

                    Divider(modifier = Modifier.padding(vertical = 8.dp))

                    Text(
                        "‚è≥ Ê¨°„ÅÆ‰øùÂ≠ò„Åæ„ÅßÔºö${secondsLeft} Áßí",
                        style = MaterialTheme.typography.bodyLarge
                    )

                    Divider(modifier = Modifier.padding(vertical = 8.dp))

                    Text("üìã ‰øùÂ≠ò„Åï„Çå„Åü„Çπ„ÉÜ„ÉÉ„Éó‰∏ÄË¶ß", style = MaterialTheme.typography.titleMedium)

                    LazyColumn(modifier = Modifier.fillMaxWidth()) {
                        items(stepList) { record ->
                            Text("üìÖ ${record.date} ‚è∞ ${record.time} Ôºöüë£ ${record.step} Ê≠©")
                        }
                    }
                }
            }
        }
    }

    private fun getToday(): String {
        val sdf = SimpleDateFormat("yyyy-MM-dd", Locale.getDefault())
        return sdf.format(Date())
    }

    private fun getTime(): String {
        val sdf = SimpleDateFormat("HH:mm:ss", Locale.getDefault())
        return sdf.format(Date())
    }
}
